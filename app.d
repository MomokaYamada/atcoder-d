import std;

alias sread = () => readln.chomp();
alias lread = () => readln.chomp.to!long();
alias aryread(T = long) = () => readln.split.to!(T[]);
//aryread!string();
//auto PS = new Tuple!(long,string)[](M);
//x[]=1;でlong[]全要素1に初期化
void main()
{
    auto C = new string[][](24, 5);
    // writeln(C);
    C[0][0] = "若年";
    C[0][1] = "近視";
    C[0][2] = "なし";
    C[0][3] = "少";
    C[0][4] = "勧められない";

    C[1][0] = "若年";
    C[1][1] = "近視";
    C[1][2] = "なし";
    C[1][3] = "正常";
    C[1][4] = "ソフト";

    C[2][0] = "若年";
    C[2][1] = "近視";
    C[2][2] = "あり";
    C[2][3] = "少";
    C[2][4] = "勧められない";

    C[3][0] = "若年";
    C[3][1] = "近視";
    C[3][2] = "あり";
    C[3][3] = "正常";
    C[3][4] = "ハード";

    C[4][0] = "若年";
    C[4][1] = "遠視";
    C[4][2] = "なし";
    C[4][3] = "少";
    C[4][4] = "勧められない";

    C[5][0] = "若年";
    C[5][1] = "遠視";
    C[5][2] = "なし";
    C[5][3] = "正常";
    C[5][4] = "ソフト";

    C[6][0] = "若年";
    C[6][1] = "遠視";
    C[6][2] = "あり";
    C[6][3] = "少";
    C[6][4] = "勧められない";

    C[7][0] = "若年";
    C[7][1] = "遠視";
    C[7][2] = "あり";
    C[7][3] = "正常";
    C[7][4] = "ハード";

    C[8][0] = "中年";
    C[8][1] = "近視";
    C[8][2] = "なし";
    C[8][3] = "少";
    C[8][4] = "勧められない";

    C[9][0] = "中年";
    C[9][1] = "近視";
    C[9][2] = "なし";
    C[9][3] = "正常";
    C[9][4] = "ソフト";

    C[10][0] = "中年";
    C[10][1] = "近視";
    C[10][2] = "あり";
    C[10][3] = "少";
    C[10][4] = "勧められない";

    C[11][0] = "中年";
    C[11][1] = "近視";
    C[11][2] = "あり";
    C[11][3] = "正常";
    C[11][4] = "ハード";

    C[12][0] = "中年";
    C[12][1] = "遠視";
    C[12][2] = "なし";
    C[12][3] = "少";
    C[12][4] = "勧められない";

    C[13][0] = "中年";
    C[13][1] = "遠視";
    C[13][2] = "なし";
    C[13][3] = "正常";
    C[13][4] = "ソフト";

    C[14][0] = "中年";
    C[14][1] = "遠視";
    C[14][2] = "あり";
    C[14][3] = "少";
    C[14][4] = "勧められない";

    C[15][0] = "中年";
    C[15][1] = "遠視";
    C[15][2] = "あり";
    C[15][3] = "正常";
    C[15][4] = "勧められない";

    C[16][0] = "高年";
    C[16][1] = "近視";
    C[16][2] = "なし";
    C[16][3] = "少";
    C[16][4] = "勧められない";

    C[17][0] = "高年";
    C[17][1] = "近視";
    C[17][2] = "なし";
    C[17][3] = "正常";
    C[17][4] = "勧められない";

    C[18][0] = "高年";
    C[18][1] = "近視";
    C[18][2] = "あり";
    C[18][3] = "少";
    C[18][4] = "勧められない";

    C[19][0] = "高年";
    C[19][1] = "近視";
    C[19][2] = "あり";
    C[19][3] = "正常";
    C[19][4] = "ハード";

    C[20][0] = "高年";
    C[20][1] = "遠視";
    C[20][2] = "なし";
    C[20][3] = "少";
    C[20][4] = "勧められない";

    C[21][0] = "高年";
    C[21][1] = "遠視";
    C[21][2] = "なし";
    C[21][3] = "正常";
    C[21][4] = "ソフト";

    C[22][0] = "高年";
    C[22][1] = "遠視";
    C[22][2] = "あり";
    C[22][3] = "少";
    C[22][4] = "勧められない";

    C[23][0] = "高年";
    C[23][1] = "遠視";
    C[23][2] = "あり";
    C[23][3] = "正常";
    C[23][4] = "勧められない";
    // foreach (i; 0 .. 24)
    // {
    //     writeln(C[i]);
    // }

    long 若年ソフト;
    long 若年ハード;
    long 若年勧められない;
    foreach (i; 0 .. (C.length))
    {
        if (C[i][0] == "若年" && C[i][4] == "ソフト")
        {
            若年ソフト += 1;
        }
        else if (C[i][0] == "若年" && C[i][4] == "ハード")
        {
            若年ハード += 1;
        }
        else if (C[i][0] == "若年" && C[i][4] == "勧められない")
        {
            若年勧められない += 1;
        }
    }
    writeln("若年ソフト:", 若年ソフト, " 若年ハード:",
            若年ハード, " 若年勧められない:", 若年勧められない);
    long 中年ソフト;
    long 中年ハード;
    long 中年勧められない;
    foreach (i; 0 .. (C.length))
    {
        if (C[i][0] == "中年" && C[i][4] == "ソフト")
        {
            中年ソフト += 1;
        }
        else if (C[i][0] == "中年" && C[i][4] == "ハード")
        {
            中年ハード += 1;
        }
        else if (C[i][0] == "中年" && C[i][4] == "勧められない")
        {
            中年勧められない += 1;
        }
    }
    writeln("中年ソフト:", 中年ソフト, " 中年ハード:",
            中年ハード, " 中年勧められない:", 中年勧められない);
    long 高年ソフト;
    long 高年ハード;
    long 高年勧められない;
    foreach (i; 0 .. (C.length))
    {
        if (C[i][0] == "高年" && C[i][4] == "ソフト")
        {
            高年ソフト += 1;
        }
        else if (C[i][0] == "高年" && C[i][4] == "ハード")
        {
            高年ハード += 1;
        }
        else if (C[i][0] == "高年" && C[i][4] == "勧められない")
        {
            高年勧められない += 1;
        }
    }
    writeln("高年ソフト:", 高年ソフト, " 高年ハード:",
            高年ハード, " 高年勧められない:", 高年勧められない);
    writeln("log10(2):", log10(2));
    // writeln(cast(double) 若年ソフト / 24);
    double 若年エントロピーtmp1 = (cast(double) 若年ソフト / 8) * log10(
            (cast(double) 若年ソフト / 8));
    double 若年エントロピーtmp2 = (cast(double) 若年ハード / 8) * log10(
            (cast(double) 若年ハード / 8));
    double 若年エントロピーtmp3 = (cast(double) 若年勧められない / 8) * log10(
            (cast(double) 若年勧められない / 8));
    double 若年エントロピー = (
            若年エントロピーtmp1 + 若年エントロピーtmp2
            + 若年エントロピーtmp3) * (-1);
    writeln("若年エントロピー:", 若年エントロピー);

    double 中年エントロピーtmp1 = (cast(double) 中年ソフト / 8) * log10(
            (cast(double) 中年ソフト / 8));
    double 中年エントロピーtmp2 = (cast(double) 中年ハード / 8) * log10(
            (cast(double) 中年ハード / 8));
    double 中年エントロピーtmp3 = (cast(double) 中年勧められない / 8) * log10(
            (cast(double) 中年勧められない / 8));
    double 中年エントロピー = (
            中年エントロピーtmp1 + 中年エントロピーtmp2
            + 中年エントロピーtmp3) * (-1);
    writeln("中年エントロピー:", 中年エントロピー);

    double 高年エントロピーtmp1 = (cast(double) 高年ソフト / 8) * log10(
            (cast(double) 高年ソフト / 8));
    double 高年エントロピーtmp2 = (cast(double) 高年ハード / 8) * log10(
            (cast(double) 高年ハード / 8));
    double 高年エントロピーtmp3 = (cast(double) 高年勧められない / 8) * log10(
            (cast(double) 高年勧められない / 8));
    double 高年エントロピー = (
            高年エントロピーtmp1 + 高年エントロピーtmp2
            + 高年エントロピーtmp3) * (-1);
    writeln("高年エントロピー:", 高年エントロピー);
    double 全体エントロピー = (
            (cast(double) 5 / 24 * log10(cast(double) 5 / 24)) + (cast(
            double) 4 / 24 * log10(cast(double) 4 / 24)) + (
            cast(double) 15 / 24 * log10(cast(double) 15 / 24))) * (-1);
    writeln("全体エントロピー:", 全体エントロピー);
    writeln(全体エントロピー - (cast(double) 8 / 24 * 若年エントロピー + cast(
            double) 8 / 24 * 中年エントロピー + cast(double) 8 / 24
            * 高年エントロピー));

}

void scan(L...)(ref L A)
{
    auto l = readln.split;
    foreach (i, T; L)
    {
        A[i] = l[i].to!T;
    }
}

void arywrite(T)(T a)
{
    a.map!text.join(' ').writeln;
}
